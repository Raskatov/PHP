<?php 

/*ТРИ ПРИНЦИПА ООП
— Инкапсуляция
— Полиморфизм
— Наследование*/


/*Класс - это некий тип / структура / шаблон на базе которого мы будем
создавать объекты.
По сути, основная задача классов - задать контекст, собрать в одном месте
всё, что относится к одной сущности.*/
class SimpleClass
{
// пустой класс
// с ним тоже можно уже работать
}


/*СВОЙСТВА
Класс может содержать свойства и методы. Разберемся со свойствами.*/
class SimpleClass
{
    public $simpleProperty; //свойство без значения
    var $anotherSimpleProperty; // var == public, но используйте свойство со значением по умолчанию
    public $propertyWithDefaultValue = 100;
}




/*МЕТОДЫ
Теперь разберемся с методами*/
class SimpleClass
{
    public function simpleMethod()
    {
    //тело метода - тут может быть любая логика
    }
}



/*МЕТОДЫ (Ч.2)
Методы, как и функции, могут принимать входные параметры, иметь
параметры по умолчанию, возвращать или не возвращать значения.*/
class SimpleClass
{
    public function anotherMethod($a, &$b, $c = 'Значение по умолчанию')
    {
    //тело метода - тут может быть любая логика
    }
}



//И ВСЁ ВМЕСТЕ
class SimpleClass
{
    public $simpleProperty; //свойство
    public $simplePropertyWithValue = 100; //свойство
    public function simpleMethod() {} //пустой метод без параметров
    public function anotherMethod($a, &$b, $c = 'Значение по умолчанию')
    {
    //тело метода - тут может быть любая логика
    }
}



class Product
{
    public $name; //свойство
    public $category; //свойство
    public $price; //свойство
    public $discount; //свойство

    public function getPrice() //метод
    {
    // тут базовая логика из нашей функции
    }
}


/*БАЗОВЫЕ ПОНЯТИЯ И КОНСТРУКЦИИ ООП. ОБЪЕКТЫ.
КАК СОЗДАВАТЬ ОБЪЕКТЫ
Объекты - это конкретные и уникальные экземпляры классов*/
class SimpleClass //это класс
    {

    }
$simpleObject = SimpleClass(); //а вот это объект
$anotherObject = SimpleClass(); //и вот это объект
$whatAboutThat = SimpleClass(); //и даже это объект





/*РАБОТА СО СВОЙСТВАМИ И МЕТОДАМИ
Итак, еще раз. Допустим у нас есть класс со свойствами и методами. Как же
с ними работать?*/
class SimpleClass
{
    public $simpleProperty; //свойство
    public $simplePropertyWithValue = 200; //свойство
    public function simpleMethod() {
        return 'Результат выполнения метода';
    }
}



/*РАБОТА СО СВОЙСТВАМИ И МЕТОДАМИ (Ч.2)
Алгоритм такой: создаём объект и обращаемся к его свойствам и методам*/
$object = new SimpleClass();
$object->simpleProperty = 100; //присваиваем значение свойству
echo $object->simpleProperty;
//считываем свойство и выводим - echo $object simplePropertyWithValue;
//считываем свойство и обращаемся к методу и выводим его результат
echo $object->simpleMethod(); //что будет выведено?




/*РАБОТА СО СВОЙСТВАМИ И МЕТОДАМИ (Ч.3)
Важно понять - у каждого объекта свои свойства и методы, класс это тип.*/
$object = new SimpleClass();
$anotherObject = new SimpleClass();

$object->simplePropertyWithValue = 1;
echo $anotherObject->simplePropertyWithValue; //что выведет?
echo $object->simplePropertyWithValue; //что выведет?




/*НА ПРИМЕРЕ ПРОДУКТОВ
Вспомним, какой класс у нас был для описания продуктов.*/
class Product
{
    public $name; //свойство
    public $category; //свойство
    public $price; //свойство
    public $discount; //свойство

    public function getPrice()
    {
    // тут базовая логика
    }
}



/*НА ПРИМЕРЕ ПРОДУКТОВ (Ч.2)
И вот как мы с ними могли бы работать*/
$product = new Product();
$product->name = 'Apple iPhone 7';
$product->price = 50000;

$anotherProduct = new Product();
$anotherProduct->name = 'Samsung Galaxy S7 Edge';
$anotherProduct->price = 50000;



/*ПРО ПЕЧЕНЬКИ
Чтобы лучше понять разницу между классами и объектами, представьте, что
формочка для печенек слева, определяющая их форму - это Класс , а сами
печеньки которые в итоге получаются - это Объекты . :)*/





/*ПРО ПЕЧЕНЬКИ (Ч.2)
Таким образом, в момент создания объекта мы примеряем формочку и
берем некоторые стартовые свойства и методы объекта. Потом мы вольны
их менять (никто нам не запрещает скатать шарик из медвежонка)
Свойства - это некоторые параметры объекта. Например, название,
материал, и т.д.
Методы, как правило, - это некоторые действия, которые можно с объектом
делать.
Обычно, именно по этим принципам и строятся классы и объекты*/




/*ВЕРНЕМСЯ В РЕАЛЬНЫЙ МИР
В связи со всем вышесказанным, часто, для понимания ООП рекомендуют
рассматривать объекты реального мира. Примеры:
1. Машина - класс, каждая Audi Q7, которую вы видите на улице -
конкретный объект класса "Машина"
2. Здание - класс, дом в котором вы живете - объект класса "Здание"
3. Ноутбук - класс, конкретный ноутбук ASUS по которому я рассказываю
эту лекцию - объект.*/



/*ПОПРОБУЕМ ПОРАЗМЫСЛИТЬ
На самом деле, из того, что мы уже успели рассмотреть, никакой разницы с
ассоциативными массивами пока нет. По сути, мы стали просто вместо
индексов использовать свойства.
*/
$product = new Product();
$product->name = 'Apple iPhone 7';
$product->price = 50000;
// можно сказать, почти идентично
$productArray['name'] = 'Apple iPhone 7';
$productPrice['price'] = 50000;



/*ПОМНИТЕ НАШУ ФУНКЦИЮ ДЛЯ РАССЧЕТА ЦЕНЫ?*/
function getPrice($price, $discount, $category) {
    $phoneDiscount = ($category == 'Смартфон') ? 10 : 0;
    $discount = min($discount, $phoneDiscount);

    if ($discount) {
        return round($price - ($price * $discount / 100))
    } else {
        return $price;
    }
}



/*А МЕТОД?
Я намеренно не передавал в неё никаких параметров. Почему? Потому
что сама идея инкапсуляции была бы бессмысленна, если бы мы не имели
возможность работать со свойствами структуры внутри неё самой.*/
class Product
{
    //тут находятся свойства
    public function getPrice()
    {
    // тут базовая логика
    }
}
