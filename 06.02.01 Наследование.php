<?php

/*СРАЗУ К КОДУ (НАСЛЕДОВАНИЕ)
Простой пример наследования*/
class ParentClass //суперкласс
{
  //любые свойства и методы
}
class ChildClass extends ParentClass
{
  //данный класс наследует все свойства и методы ParentClass
  //+ может определять свои свойства и методы
}


// ПРО УТОК (КОД)
class Bird //суперкласс
{
  public $color = 'black'; //предположим, что большинство птиц
  public function fly() { echo 'Я летаю'; }
}
  class Duck extends Bird
{
  //наследует все свойства и методы Bird
}
$duck = new Duck();
$duck->fly(); //выдаст ‘Я летаю’


/*ПРО АЛЬБИНОСОВ, МНОЖЕСТВЕННОЕ
НАСЛЕДОВАНИЕ И СУПЕРКЛАССЫ
Плохая новость: в PHP нет множественного наследования. Наследовать
свойства и методы можно только от одного класса.
Хорошая новость: НО. Цепочка наследуемых классов может быть сколь
угодно длинной.
Далее рассмотрим на альбиносах*/

// ПРО АЛЬБИНОСОВ (КОД) - Ч.1
class Bird //
{
  public $sound; //пока никакого звука
  public function fly()
  {
    echo 'Я летаю';
  }
  public function makeSomeSound()
  {
    echo 'Я издаю звук ' . $this->sound;
  }
}

// ПРО АЛЬБИНОСОВ (КОД) - Ч.2
class Duck extends Bird
{
  public $sound = “Кря”; // + наследует все свойства и методы
}
class AlbinoDuck extends Duck
{
  //наследует все свойства Duck + Bird
}
$duck = new Duck();
$duck->makeSomeSound(); // обычная утка говорит “Кря”
$albinoDuck = new AlbinoDuck();
$albinoDuck->makeSomeSound(); // Утка-альбинос тоже крякает

/*КАК - ПОНЯТНО. А НАФИГА?
— Мы можем выделить общие свойства у наших объектов, вынести их в
отдельный тип.
— Если у объектов есть общее поведение, мы избегаем дублирования кода.
Делаем его более читаемым и понятным.
— В самом простом случае мы можем описать общие моменты в
суперклассе, а в остальных классах описывать только специфическую
логику.*/
