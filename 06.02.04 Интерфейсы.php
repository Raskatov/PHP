<?php

// ИНТЕРФЕЙСЫ

/*ИНТЕРФЕЙСЫ
Еще раз вспомним, что есть абстрактные классы. Это классы, у которых
могут быть методы вообще без реализации.
Интерфейсы объявляются, как и классы, но вместо ключевого слова класс
используется слово interface*/
interface SimpleInterface
{
  // мы объявили пустой интерфейс
}


/*ИНТЕРФЕЙСЫ
Интерфейс может содержать только методы , при чем без их реализации
и константы . При этом описывается сигнатура методов (какие параметры
они должны принимать)*/
interface SimpleInterface
{
  //интерфейс не содержит свойств
  //методы не содержат реализации
  public function someFunction($argument1, $argument2);
  public function secondFunction($argument1);
  public function anotherFunction();
}


/*ИНТЕРФЕЙСЫ
Класс может реализовывать интерфейс (имплементировать). Если класс
делает это он ОБЯЗАН определить реализацию конкретных методов
интерфейса в соответствии с их сигнатурой*/
interface SimpleInterface
{
  public function someFunction($argument1, $argument2);
}
class SimpleClass implements SimpleInterface
{
  //описываем, что должен делать этот метод, в данном случае public function someFunction($argument1, $argument2)
}

/*ЕЩЕ НЕМНОГО ПРО ИНТЕРФЕЙСЫ
— Интерфейс может наследовать другой интерфейс (extends)
— Все методы интерфейсов должны быть публичными
— Класс не может имплементировать два интерфейса, содержащих один и
тот же метод
— Класс может имплементировать какое угодно количество интерфейсов*/

/*СТОП... СТООООП! ОМГ, А ЭТО ЗАЧЕМ?!
— Вы можете писать свой код и без интерфейсов. Интерфейсы помогают
лучше его структурировать, добавляя обязательные элементы для
реализации. Меньше шансов сделать ошибку.
— Интерфейсы могут являться типами аргументов*/

// ОМГ, А ЭТО ЗАЧЕМ?! (КОД)
interface SimpleInterface
{
  public function someFunction($argument1, $argument2);
}
class SimpleClass implements SimpleInterface
{
  //описываем, что должен делать этот метод, в данном случае public function someFunction($argument1, $argument2)
}


// ОМГ, А ЭТО ЗАЧЕМ?! (КОД) - Ч.2
class AnotherSimpleClass
{
  // использование интерфейса гарантирует, что в object есть
  // someFunction, иначе возникнет фатальная ошибка
  public function saySmth(SimpleInterface $object)
  {
    // мы уверен, что у object есть метод SomeFunction
    // и спокойно его используем внутри этого метода
    $object->someFunction(1, 2);
  }
}
