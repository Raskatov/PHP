<?php

// ПРИМЕСИ (TRAITS)

/*ПРИМЕСИ (TRAITS)
Примеси (traits) - еще один способ расширить функциональность нашего
класса не прибегая к наследованию.
Возвращаясь к нашему примеру, предположим, что мы хотим, чтобы для
части товаров была возможность менять цену в процессе работы
приложения, а у части - нет. И товаров у нас теперь не два, а десять.
Магазин теперь торгует помимо книг
Можем ли мы использовать при этом наследование? Что произойдет если
мы будем описывать геттеры и сеттеры в родительском классе?*/


/*ПРИМЕСИ (TRAITS)
Примеси позволяют вынести часть функционала и использовать его в
любом классе*/
trait ChangePrice //обратите внимание, примесь это не класс
{
  public function setPrice($price) 
  {
    $this->price = $price
  }
class SomeProduct extends Product
{
  use ChangePrice; // подключаются примеси при помощи ключевого 
  // данный класс получит все свойства и методы родителя (Product)
  // плюс будет расширен методами и свойствами примеси ChangePrice
}


/*В ЧЕМ ФИШКА?
— Можно вынести дублирующуюся часть кода в отдельную примесь и
подключать её только туда, куда нужно.
— Более удобный и читаемый код*/
class SomeClass
{
  use ChangePrice, ChangeMemory, ChangeTitle; // эти примеси
  // данный класс “собран” из примесей и мы сразу понимаем,
  // что он может работать c ценой, памятью и названием
}

/*НА ПРАКТИКЕ
Принципиальной необходимости в примесях нет. Это просто еще один
способ сделать ваш код удобней и читабельнее. Хотя злоупотребление
ими тоже имеет последствия - можно запутаться в пересекающихся
свойствах и методах.
Это способ организовать множественное наследование
На практике острой необходимости в них почти не возникает, но помните,
что такая возможность существует.*/
